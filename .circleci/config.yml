# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  install-dependencies:
    docker:
      - image: circleci/node:lts
    working_directory: client
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
      #       - v4-packaging-dependencies-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v4-packaging-dependencies-{{ checksum "client/package-lock.json" }}

  unit-test:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v4-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      #       - v4-packaging-dependencies-
      - run:
          name: Run unit tests
          working_directory: client
          command: |
            npm ci
            npm run test:unit

  build:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v4-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      #       - v4-packaging-dependencies-
      - run:
          name: Create .env.local file
          working_directory: client
          command: echo -e "VUE_APP_AUTH0_DOMAIN=$AUTH0_DOMAIN\nVUE_APP_AUTH0_CLIENT_ID=$AUTH0_CLIENT_ID\nVUE_APP_HASURA_HTTP=$HASURA_ENDPOINT/v1/graphql\nVUE_APP_HASURA_WSS=$HASURA_WSS\n" >> .env.local
      - run:
          name: Build frontend
          working_directory: client
          command: |
            npm ci
            npm run build
      - persist_to_workspace:
          root: client/dist
          paths:
            - ./*

  deploy:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v4-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      #       - v4-packaging-dependencies-
      - attach_workspace:
          at: client/dist
      - run:
          name: Deploy frontend
          working_directory: client/dist
          command: |
            ls -l
            git config --global user.email "vincent.landais@zenika.com"
            git config --global user.name "VincentLANDAIS"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link $CLEVER_FRONT_APP_ID
            clever deploy --force

  deploy-hasura:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: circleci/node:lts
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Deploy Hasura
          working_directory: server
          command: |
            git config --global user.email "vincent.landais@zenika.com"
            git config --global user.name "VincentLANDAIS"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link $CLEVER_HASURA_APP_ID
            clever deploy --force

  run-hasura-migrations:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: install hasura cli
          command: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash
      - run:
          name: Apply migrations
          working_directory: server
          command: hasura migrate apply --all-databases --admin-secret $HASURA_ADMIN_SECRET --endpoint $HASURA_ENDPOINT
      - run:
          name: Apply metadata
          working_directory: server
          command: hasura metadata apply --admin-secret $HASURA_ADMIN_SECRET --endpoint $HASURA_ENDPOINT

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  deploy-prod:
    jobs:
      # - install-dependencies
      # - unit-test
          # requires:
          #   - install-dependencies
      - build
          # requires:
          #   - unit-test
      - deploy:
          requires:
            - build
      # - deploy-hasura:
      #     requires:
      #       - build
          # filters: &deploy-filters
          #   branches:
          #     only: main
      # - run-hasura-migrations:
      #     requires:
      #       - deploy-hasura
          # filters: *deploy-filters
