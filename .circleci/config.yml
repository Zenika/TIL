version: 2.1

jobs:
  install-dependencies:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: Install dependencies
          working_directory: client
          command: npm ci
      - save_cache:
          paths:
            - client/node_modules
          key: v2-packaging-dependencies-{{ checksum "client/package-lock.json" }}

  unit-test:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: Run unit tests
          working_directory: client
          command: npm run test:ci
      - store_test_results:
          path: client/reports

  lint:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: Run linter
          working_directory: client
          command: npm run lint

  build:
    docker:
      - image: circleci/node:lts
    parameters:
      hasura-endpoint:
        type: string
      hasura-wss:
        type: string
      auth0-domain:
        type: string
      auth0-client-id:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: Create .env.local file
          working_directory: client
          command: |
            |
              echo -e "VUE_APP_AUTH0_DOMAIN=<< parameters.auth0-domain >>\nVUE_APP_AUTH0_CLIENT_ID=<< parameters.auth0-client-id >>\nVUE_APP_HASURA_HTTP=<< parameters.hasura-endpoint >>/v1/graphql\nVUE_APP_HASURA_WSS=<< parameters.hasura-wss >>\n" >> .env.local
              cat .env.local
      - run:
          working_directory: client
          command: cat .env.local
      - run:
          name: Build frontend
          working_directory: client
          command: npm run build
      - persist_to_workspace:
          root: client/dist
          paths:
            - ./*

  deploy:
    docker:
      - image: circleci/node:lts
    parameters:
      app-id:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: client/dist
      - run:
          name: Deploy frontend
          working_directory: client/dist
          command: |
            git config --global user.email "vincent.landais@zenika.com"
            git config --global user.name "VincentLANDAIS"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.app-id >>
            clever deploy --force

  deploy-remote-schema:
    docker:
      - image: cimg/node:lts
    parameters:
      app-id:
        type: string
    steps:
      - checkout
      - run:
          name: Deploy remote schema
          working_directory: server/remote-schema
          command: |
            git config --global user.email "vincent.landais@zenika.com"
            git config --global user.name "VincentLANDAIS"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.app-id >>
            clever deploy --force

  deploy-hasura:
    docker:
      - image: cimg/node:lts
    parameters:
      app-id:
        type: string
    steps:
      - checkout
      - run:
          name: Deploy Hasura
          working_directory: server
          command: |
            git config --global user.email "vincent.landais@zenika.com"
            git config --global user.name "VincentLANDAIS"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.app-id >>
            clever deploy --force

  run-hasura-migrations:
    docker:
      - image: hasura/graphql-engine:v2.3.1.cli-migrations-v3
    parameters:
      hasura-endpoint:
        type: string
    steps:
      - checkout
      - run:
          name: Apply migrations
          working_directory: server
          command: hasura-cli migrate apply --all-databases --admin-secret $HASURA_ADMIN_SECRET --endpoint << parameters.hasura-endpoint >>
      - run:
          name: Apply metadata
          working_directory: server
          command: hasura-cli metadata apply --admin-secret $HASURA_ADMIN_SECRET --endpoint << parameters.hasura-endpoint >>

  deploy-auth0:
    docker:
      - image: cimg/node:lts
    parameters:
      config-file:
        type: string
      deploy-secret:
        type: string
    steps:
      - checkout
      - run:
          name: Install auth0 CLI
          working_directory: auth0
          command: sudo npm i -g auth0-deploy-cli
      - run:
          name: Install auth0 CLI
          working_directory: auth0
          command: |
            unset AUTH0_DEPLOY_SECRET_STAGING
            unset AUTH0_DEPLOY_SECRET
            env
            cat << parameters.config-file >>
      - run:
          name: Deploy Auth0 tenant
          working_directory: auth0
          command: a0deploy import --config_file << parameters.config-file >> --input_file tenant.yaml -x << parameters.deploy-secret >>

workflows:
  main:
    jobs:
      # - install-dependencies
      # - unit-test:
      #     requires:
      #       - install-dependencies
      # - lint:
      #     requires:
      #       - install-dependencies

      # STAGING
      - deploy-auth0:
          name: deploy-auth0-staging
          config-file: staging-config.json
          deploy-secret: $AUTH0_DEPLOY_SECRET_STAGING
      # - deploy-remote-schema:
      #     name: deploy-remote-schema-staging
      #     requires:
      #       - deploy-auth0-staging
      #     app-id: $CLEVER_REMOTE_SCHEMA_APP_ID_STAGING
      # - deploy-hasura:
      #     name: deploy-hasura-staging
      #     requires:
      #       - deploy-remote-schema-staging
      #     app-id: $CLEVER_HASURA_APP_ID_STAGING
      # - run-hasura-migrations:
      #     name: run-hasura-migrations-staging
      #     requires:
      #       - deploy-hasura-staging
      #     hasura-endpoint: $HASURA_ENDPOINT_STAGING
      # - build:
      #     name: build-staging
      #     requires:
      #       - unit-test
      #       - lint
      #     hasura-endpoint: $HASURA_ENDPOINT_STAGING
      #     hasura-wss: $HASURA_WSS_STAGING
      #     auth0-domain: $AUTH0_DOMAIN_STAGING
      #     auth0-client-id: $AUTH0_CLIENT_ID_STAGING
      # - deploy:
      #     name: deploy-staging
      #     requires:
      #       - build-staging
      #       - run-hasura-migrations-staging
      #     app-id: $CLEVER_FRONT_APP_ID_STAGING

      # PROD
      - deploy-auth0:
          name: deploy-auth0-prod
          # filters: &prod-filters
          #   branches:
          #     only: main
          config-file: prod-config.json
          deploy-secret: $AUTH0_DEPLOY_SECRET
      # - deploy-remote-schema:
      #     requires:
      #       - deploy-auth0
      #     filters: *prod-filters
      # - deploy-hasura:
      #     requires:
      #       - deploy-remote-schema
      #     filters: *prod-filters
      # - run-hasura-migrations:
      #     requires:
      #       - deploy-hasura
      #     filters: *prod-filters
      # - build:
        #   requires:
        #     - unit-test
        #     - lint
      # - deploy:
      #     requires:
      #       - build
      #       - run-hasura-migrations
      #     filters: *prod-filters